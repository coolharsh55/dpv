%{% from 'macro_term_table.jinja2' import index_concepts %}
%{% from 'macro_term_table.jinja2' import list_hierarchy %}
{% from 'macro_term_table.jinja2' import table_properties %}
{% from 'macro_dpv_document_family.jinja2' import dpv_document_family, sotd %}
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>{% block title %}Rules{% endblock title %}</title>
  <script src="https://www.w3.org/Tools/respec/respec-w3c" class="remove" defer></script>
  {% block RESPEC %}
  <script class="remove">
   // All config options at https://respec.org/docs/ 
   var respecConfig = {
    shortName: "dpv",
    title: "Rules",
    subtitle: "Data Privacy Vocabulary (DPV)",
    publishDate: "2023-11-12",
    specStatus: "CG-DRAFT",
    group: "dpvcg",
    latestVersion: "https://w3id.org/dpv/modules/rules",
    canonicalUri: "https://w3id.org/dpv/modules/rules",
    edDraftURI: "https://w3id.org/dpv/ed/dpv/modules/rules",
    github: "w3c/dpv",
    subjectPrefix: "[dpv]",
    doJsonLd: true,
    lint: { "no-unused-dfns": false, "local-refs-exist": true },
    editors: [
    {
      name: "Harshvardhan J. Pandit",
      url: "https://harshp.com/",
      "company": "{{ "Harshvardhan J. Pandit" | generate_author_affiliation }}",
    }
    ],
    localBiblio: {%  include 'references.json' %}
  };
</script>
{% endblock RESPEC %}
<link rel="stylesheet" type="text/css" href="../../media/common.css">
</head>
<body>
{% block ABSTRACT %}
    <section id="abstract">
      <p>The Data Privacy Vocabulary [[DPV]] enables expressing machine-readable metadata about the use and processing of personal data based on legislative requirements such as the General Data Protection Regulation [[GDPR]]. This document describes the DPV specification along with its data model.</p>
      <p>The canonical URL for DPV is <a href="https://w3id.org/dpv">https://w3id.org/dpv</a> which contains (this) specification. The namespace for DPV terms is <a href="https://w3id.org/dpv#"><code>https://w3id.org/dpv#</code></a>, the suggested prefix is <code>dpv</code>, and this document along with source and releases are available at <a href="https://github.com/w3c/dpv">https://github.com/w3c/dpv</a>.</p>
      {{ dpv_document_family(document='dpv-spec') }}
      {{ sotd() }}
    </section>
{% endblock ABSTRACT %}
  <section id="introduction">
    <h2>Introduction</h2>
    <blockquote>This document assumes the reader is familiar with DPV through the [[[DPV-Primer]]], and thus focuses on providing a topically structured documentation of concepts defined by DPV.</blockquote>

    <p>DPV provides the concept [=Rule=] to specify requirements, constraints, and other forms of 'rules' that are associated with specific contexts (e.g., processing activities) using the relation [=hasRule=]. DPV provides three forms of Rules to represent [=Permission=], [=Prohibition=] and [=Obligation=], and their corresponding relations [=hasPermission=], [=hasProhibition=] and [=hasObligation=], to indicate a Rule that specifies whether something is permitted, prohibited or an obligation, respectively. DPV does not define additional semantics for rules and limits its scope and focus to provide a simple way to specify permissions, prohibitions, and obligations as common rules associated with personal data and its processing activities. For a more extensive and richer set of semantics and concepts to represent rules, DPVCG suggests looking towards other languages, such as [[ODRL]], [[SHACL]], and [[RuleML]] that have been developed with the specific goal of representing and applying rules. We welcome contributions for aligning DPV with these, and for providing guidance on how to complement DPV's rule-based concepts with external languages.</p>
  <p>In representing Rules, DPV only provides the concept and does not express any inherent semantics on what those rules mean in relation to each other. For example, DPV does not express Permission to be non-compatible or disjoint from Prohibition. This is to separate the interpretation and application of rules based on the necessities of a use-case. For example, in a legal investigation it may be prudent to specify permission and prohibition can never occur together, but this may not be true if there are different legal requirements that allow a prohibition to be resolved or deferred, such as through another permission that overrides the prohibition.</p>
  <p>DPV does not specify 'default' in relation to rules, i.e. it does not provide an interpretation of whether some rules apply automatically unless otherwise declared. For example, in declaring an instance of Personal Data Handling, the assumption is that the activities are modelled for what is happening or what is intended/planned to happen. The explicit annotation using a Permission rule adds information about whether some activity is permitted (and its associated information). Instead, if the use-case is using DPV to only document activities that are permitted, there is no need to explicitly specify the permissions. Similarly, just because something is happening or planned to happen, it cannot be assumed to be permitted (e.g., from evaluation of legal requirements). </p>
  <p>To associate a rule with a specific context, which can be a PersonalDataHandling or PersonalData or Purposes, the relations [=hasPermission=], [=hasProhibition=] and [=hasObligation=] are provided. Additional types of rules can be added to DPV by extending the Rule Concept (e.g., <code>:MyRule rdfs:isSubClassOf dpv:Rule</code>).</p>

  {{ list_hierarchy(modules['rules']['classes']) }}
</section>

  <section>
    <h2>Permission</h2>
  </section>

  <section>
    <h2>Prohibition</h2>
  </section>

  <section>
    <h2>Obligation</h2>
  </section>

  <section>
    <h2>Further Rules Modeling</h2>
  </section>

<section>
  <h2>Vocabulary Index</h2>
  <section id="classes">
    {{ index_concepts(modules['rules']['classes'], vocab_name, filter="classes") }}
  </section>
  <section id="properties">
    {{ index_concepts(modules['rules']['properties'], vocab_name, filter="properties") }}
  </section>
  <section id="external-concepts">
    <p>DPV uses the following terms from [[RDF]] and  [[RDFS]] with their defined meanings:</p>
    <ul>
      <li id="rdf:type"><dfn>rdf:type</dfn> to denote a concept is an instance of another concept</li>
      <li id="rdfs:Class"><dfn>rdfs:Class</dfn> to denote a concept is a Class or a category</li>
      <li id="rdfs:subClassOf"><dfn>rdfs:subClassOf</dfn> to specify the concept is a subclass (subtype, sub-category, subset) of another concept</li>
      <li id="rdf:Property"><dfn>rdf:Property</dfn> to denote a concept is a property or a relation</li>
      </ul>
    <p>The following external concepts are re-used within DPV:</p>
    {% set module_combined = modules['rules']['classes'].copy() %}
    {% set _ = module_combined.update(modules['rules']['properties']) %}
    {{ index_concepts(module_combined, vocab_name, filter="external") }}
  </section>
</section>
<script type="text/javascript" src="../../media/common.js" defer></script>
</body>
</html>